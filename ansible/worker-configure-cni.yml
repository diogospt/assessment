---
- name: Configure CNI
  hosts: localhost
  connection: local
  become: yes
  tasks:
    - name: Configure CNI
      ansible.builtin.shell: |
        POD_CIDR=$(curl -s -H "Metadata-Flavor: Google" \
          http://metadata.google.internal/computeMetadata/v1/instance/attributes/pod-cidr)
        
        cat <<EOF | sudo tee /etc/cni/net.d/10-bridge.conf
        {
            "cniVersion": "0.4.0",
            "name": "bridge",
            "type": "bridge",
            "bridge": "cnio0",
            "isGateway": true,
            "ipMasq": true,
            "ipam": {
                "type": "host-local",
                "ranges": [
                  [{"subnet": "${POD_CIDR}"}]
                ],
                "routes": [{"dst": "0.0.0.0/0"}]
            }
        }
        EOF
        
        cat <<EOF | sudo tee /etc/cni/net.d/99-loopback.conf
        {
            "cniVersion": "0.4.0",
            "name": "lo",
            "type": "loopback"
        }
        EOF

    - name: Create folder /etc/containerd/
      file:
        path: /etc/containerd/
        state: directory
        owner: root
        group: root
    - name: Configure containerd
      ansible.builtin.shell: |
        cat << EOF | sudo tee /etc/containerd/config.toml
        [plugins]
          [plugins.cri.containerd]
            snapshotter = "overlayfs"
            [plugins.cri.containerd.default_runtime]
              runtime_type = "io.containerd.runtime.v1.linux"
              runtime_engine = "/usr/local/bin/runc"
              runtime_root = ""
        EOF
        
        cat <<EOF | sudo tee /etc/systemd/system/containerd.service
        [Unit]
        Description=containerd container runtime
        Documentation=https://containerd.io
        After=network.target

        [Service]
        ExecStartPre=/sbin/modprobe overlay
        ExecStart=/bin/containerd
        Restart=always
        RestartSec=5
        Delegate=yes
        KillMode=process
        OOMScoreAdjust=-999
        LimitNOFILE=1048576
        LimitNPROC=infinity
        LimitCORE=infinity

        [Install]
        WantedBy=multi-user.target
        EOF

    - name: Configure the kubelet
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop:
        - src: /home/dsantos/{{ansible_hostname}}-key.pem
          dest: /var/lib/kubelet/
        - src: /home/dsantos/{{ansible_hostname}}.pem
          dest: /var/lib/kubelet/
        - src: /home/dsantos/{{ansible_hostname}}.kubeconfig
          dest: /var/lib/kubelet/kubeconfig
        - src: /home/dsantos/ca.pem
          dest: /var/lib/kubernetes/
    - name: configure KubeletConfiguration
      ansible.builtin.shell: |
        cat <<EOF | sudo tee /var/lib/kubelet/kubelet-config.yaml
        kind: KubeletConfiguration
        apiVersion: kubelet.config.k8s.io/v1beta1
        authentication:
          anonymous:
            enabled: false
          webhook:
            enabled: true
          x509:
            clientCAFile: "/var/lib/kubernetes/ca.pem"
        authorization:
          mode: Webhook
        clusterDomain: "cluster.local"
        clusterDNS:
          - "10.32.0.10"
        podCIDR: "${POD_CIDR}"
        resolvConf: "/run/systemd/resolve/resolv.conf"
        runtimeRequestTimeout: "15m"
        tlsCertFile: "/var/lib/kubelet/{{ansible_hostname}}.pem"
        tlsPrivateKeyFile: "/var/lib/kubelet/{{ansible_hostname}}-key.pem"
        EOF
        
        cat <<EOF | sudo tee /etc/systemd/system/kubelet.service
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/kubernetes/kubernetes
        After=containerd.service
        Requires=containerd.service

        [Service]
        ExecStart=/usr/local/bin/kubelet \\
          --config=/var/lib/kubelet/kubelet-config.yaml \\
          --container-runtime=remote \\
          --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock \\
          --image-pull-progress-deadline=2m \\
          --kubeconfig=/var/lib/kubelet/kubeconfig \\
          --network-plugin=cni \\
          --register-node=true \\
          --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF
    - name: Copy kube-proxy.kubeconfig to /var/lib/kube-proxy/kubeconfig
      copy: src=/home/dsantos/kube-proxy.kubeconfig dest=/var/lib/kube-proxy/kubeconfig
    - name: Configure KubeProxyConfiguration
      ansible.builtin.shell: |
        cat <<EOF | sudo tee /var/lib/kube-proxy/kube-proxy-config.yaml
        kind: KubeProxyConfiguration
        apiVersion: kubeproxy.config.k8s.io/v1alpha1
        clientConnection:
          kubeconfig: "/var/lib/kube-proxy/kubeconfig"
        mode: "iptables"
        clusterCIDR: "10.200.0.0/16"
        EOF
        
        cat <<EOF | sudo tee /etc/systemd/system/kube-proxy.service
        [Unit]
        Description=Kubernetes Kube Proxy
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-proxy \\
          --config=/var/lib/kube-proxy/kube-proxy-config.yaml
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF
    - name: daemon-reload
      ansible.builtin.systemd:
        daemon_reload: true

    - name: enable containerd
      ansible.builtin.systemd:
        enabled: true
        name: containerd
    - name: enable kubelet
      ansible.builtin.systemd:
        enabled: true
        name: kubelet
    - name: enable kube-proxy
      ansible.builtin.systemd:
        enabled: true
        name: kube-proxy

    - name: start containerd service
      ansible.builtin.systemd:
        state: started
        name: containerd
    - name: start kubelet service
      ansible.builtin.systemd:
        state: started
        name: kubelet
    - name: start kube-proxy service
      ansible.builtin.systemd:
        state: started
        name: kube-proxy
