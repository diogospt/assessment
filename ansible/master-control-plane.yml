---
- name: Configure Control Plane for K8s
  hosts: localhost
  connection: local
  become: yes
  tasks:
    - name: Create folder /etc/kubernetes/config
      file:
        path: /etc/kubernetes/config
        state: directory
        owner: root
        group: root
    - name: Download KubeApi Binaries
      ansible.builtin.get_url:
        url: "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-apiserver"
        dest: /home/dsantos
        mode: '0777'
    - name: Download KubeController Binaries
      ansible.builtin.get_url:
        url: "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-controller-manager"
        dest: /home/dsantos
        mode: '0777'
    - name: Download KubeScheduler Binaries
      ansible.builtin.get_url:
        url: "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kube-scheduler"
        dest: /home/dsantos
        mode: '0777'
    - name: Download Kubectl Binaries
      ansible.builtin.get_url:
        url: "https://storage.googleapis.com/kubernetes-release/release/v1.21.0/bin/linux/amd64/kubectl"
        dest: /home/dsantos
        mode: '0777'
    - name: configure chmod +x on apiserver
      file: dest=/home/dsantos/kube-apiserver mode=a+x
    - name: configure chmod +x on controller-manager bin
      file: dest=/home/dsantos/kube-controller-manager mode=a+x
    - name: configure chmod +x on kube-scheduler bin
      file: dest=/home/dsantos/kube-scheduler mode=a+x
    - name: configure chmod +x on kube-kubectl bin
      file: dest=/home/dsantos/kubectl mode=a+x
    - name: copy binaries to /usr/local/bin/
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop:
        - src: /home/dsantos/kube-apiserver
          dest: /usr/local/bin/
        - src: /home/dsantos/kube-controller-manager
          dest: /usr/local/bin/
        - src: /home/dsantos/kube-scheduler
          dest: /usr/local/bin/
        - src: /home/dsantos/kubectl
          dest: /usr/local/bin/
    - name: Create /var/lib/kubernetes/
      file:
        path: /var/lib/kubernetes/
        state: directory
        owner: root
        group: root
    - name: copy files to /var/lib/kubernetes/
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop:
        - src: /home/dsantos/ca.pem
          dest: /var/lib/kubernetes/
        - src: /home/dsantos/ca-key.pem
          dest: /var/lib/kubernetes/
        - src: /home/dsantos/kubernetes-key.pem
          dest: /var/lib/kubernetes/
        - src: /home/dsantos/kubernetes.pem
          dest: /var/lib/kubernetes/
        - src: /home/dsantos/service-account-key.pem
          dest: /var/lib/kubernetes/
        - src: /home/dsantos/service-account.pem
          dest: /var/lib/kubernetes/
        - src: /home/dsantos/encryption-config.yaml
          dest: /var/lib/kubernetes/
    - name: configure systemd kubeapi
      ansible.builtin.shell: |
        INTERNAL_IP=$(curl -s -H "Metadata-Flavor: Google" \
          http://metadata.google.internal/computeMetadata/v1/instance/network-interfaces/0/ip)
        
        KUBERNETES_PUBLIC_ADDRESS=$(gcloud compute addresses describe kubernetes-public-ip \
          --region europe-west4 \
          --format 'value(address)')
        
        cat <<EOF | sudo tee /etc/systemd/system/kube-apiserver.service
        [Unit]
        Description=Kubernetes API Server
        Documentation=https://github.com/kubernetes/kubernetes
        
        [Service]
        ExecStart=/usr/local/bin/kube-apiserver \\
        --advertise-address=${INTERNAL_IP} \\
        --allow-privileged=true \\
        --apiserver-count=3 \\
        --audit-log-maxage=30 \\
        --audit-log-maxbackup=3 \\
        --audit-log-maxsize=100 \\
        --audit-log-path=/var/log/audit.log \\
        --authorization-mode=Node,RBAC \\
        --bind-address=0.0.0.0 \\
        --client-ca-file=/var/lib/kubernetes/ca.pem \\
        --enable-admission-plugins=NamespaceLifecycle,NodeRestriction,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota \\
        --etcd-cafile=/var/lib/kubernetes/ca.pem \\
        --etcd-certfile=/var/lib/kubernetes/kubernetes.pem \\
        --etcd-keyfile=/var/lib/kubernetes/kubernetes-key.pem \\
        --etcd-servers=https://10.240.0.10:2379,https://10.240.0.11:2379 \\
        --event-ttl=1h \\
        --encryption-provider-config=/var/lib/kubernetes/encryption-config.yaml \\
        --kubelet-certificate-authority=/var/lib/kubernetes/ca.pem \\
        --kubelet-client-certificate=/var/lib/kubernetes/kubernetes.pem \\
        --kubelet-client-key=/var/lib/kubernetes/kubernetes-key.pem \\
        --runtime-config='api/all=true' \\
        --service-account-key-file=/var/lib/kubernetes/service-account.pem \\
        --service-account-signing-key-file=/var/lib/kubernetes/service-account-key.pem \\
        --service-account-issuer=https://${KUBERNETES_PUBLIC_ADDRESS}:6443 \\
        --service-cluster-ip-range=10.32.0.0/24 \\
        --service-node-port-range=30000-32767 \\
        --tls-cert-file=/var/lib/kubernetes/kubernetes.pem \\
        --tls-private-key-file=/var/lib/kubernetes/kubernetes-key.pem \\
        --v=2
        Restart=on-failure
        RestartSec=5
        
        [Install]
        WantedBy=multi-user.target
        EOF
    - name: copy kube controller manager config
      copy: src=/home/dsantos/kube-controller-manager.kubeconfig dest=/var/lib/kubernetes/
    - name: configure systemd kube controller manager
      ansible.builtin.shell: |
        cat <<EOF | sudo tee /etc/systemd/system/kube-controller-manager.service
        [Unit]
        Description=Kubernetes Controller Manager
        Documentation=https://github.com/kubernetes/kubernetes
        
        [Service]
        ExecStart=/usr/local/bin/kube-controller-manager \\
        --bind-address=0.0.0.0 \\
        --cluster-cidr=10.200.0.0/16 \\
        --cluster-name=kubernetes \\
        --cluster-signing-cert-file=/var/lib/kubernetes/ca.pem \\
        --cluster-signing-key-file=/var/lib/kubernetes/ca-key.pem \\
        --kubeconfig=/var/lib/kubernetes/kube-controller-manager.kubeconfig \\
        --leader-elect=true \\
        --root-ca-file=/var/lib/kubernetes/ca.pem \\
        --service-account-private-key-file=/var/lib/kubernetes/service-account-key.pem \\
        --service-cluster-ip-range=10.32.0.0/24 \\
        --use-service-account-credentials=true \\
        --v=2
        Restart=on-failure
        RestartSec=5
        
        [Install]
        WantedBy=multi-user.target
        EOF
    - name: copy kube scheduler config
      copy: src=/home/dsantos/kube-scheduler.kubeconfig dest=/var/lib/kubernetes/
    - name: configure KubeSchedulerConfiguration
      ansible.builtin.shell: |
        cat <<EOF | sudo tee /etc/kubernetes/config/kube-scheduler.yaml
        apiVersion: kubescheduler.config.k8s.io/v1
        kind: KubeSchedulerConfiguration
        clientConnection:
          kubeconfig: "/var/lib/kubernetes/kube-scheduler.kubeconfig"
        leaderElection:
          leaderElect: true
        EOF
    - name: configure systemd kube scheduler
      ansible.builtin.shell: |
        cat <<EOF | sudo tee /etc/systemd/system/kube-scheduler.service
        [Unit]
        Description=Kubernetes Scheduler
        Documentation=https://github.com/kubernetes/kubernetes
        
        [Service]
        ExecStart=/usr/local/bin/kube-scheduler \\
        --config=/etc/kubernetes/config/kube-scheduler.yaml \\
        --v=2
        Restart=on-failure
        RestartSec=5
        
        [Install]
        WantedBy=multi-user.target
        EOF
    - name: configure chmod +x on /usr/local/bin/kube-controller-manager
      file: dest=/usr/local/bin/kube-controller-manager mode=a+x
    - name: configure chmod +x on /usr/local/bin/kube-scheduler
      file: dest=/usr/local/bin/kube-scheduler mode=a+x
    - name: configure chmod +x on /usr/local/bin/kube-apiserver
      file: dest=/usr/local/bin/kube-apiserver mode=a+x
    - name: reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

    - name: start kube-apiserver service
      ansible.builtin.systemd:
        state: started
        name: kube-apiserver
    - name: enable kube-apiserver service
      ansible.builtin.systemd:
        enabled: true
        name: kube-apiserver

    - name: start kube-controller-manager service
      ansible.builtin.systemd:
        state: started
        name: kube-controller-manager
    - name: enable kube-controller-manager service
      ansible.builtin.systemd:
        enabled: true
        name: kube-controller-manager

    - name: start kube-scheduler service
      ansible.builtin.systemd:
        state: started
        name: kube-scheduler
    - name: enable kube-scheduler service
      ansible.builtin.systemd:
        enabled: true
        name: kube-scheduler

      
        
        



        
